name: Build and Push Redis with Cell Docker Image

on:
  push:
    branches: [ main ] # 当推送到 main 分支时触发
    tags:
      - 'v*.*.*' # 当推送版本标签时触发 (例如 v1.0.0)
  pull_request:
    branches: [ main ] # 当向 main 分支发起 Pull Request 时触发 (只构建不推送)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # 仅在推送事件时（非 PR）且需要推送到 GHCR 时才需要写权限
    permissions:
      contents: read
      packages: write # 需要写权限才能推送到 GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        # 仅在非 PR 事件时执行登录和推送
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # 使用 GITHUB_TOKEN 进行身份验证
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta # 给这个步骤设置一个 ID，方便后续引用其输出
        uses: docker/metadata-action@v5
        with:
          # 指定镜像仓库地址为 ghcr.io/<owner>/<repo>/redis-with-cell
          # github.repository 是 owner/repo 格式
          images: ghcr.io/${{ github.repository }}/redis-with-cell

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # 仅在非 PR 事件时推送
          push: ${{ github.event_name != 'pull_request' }}
          # 使用 docker/metadata-action 生成的标签
          tags: ${{ steps.meta.outputs.tags }}
          # 使用 docker/metadata-action 生成的标签作为 OCI labels
          labels: ${{ steps.meta.outputs.labels }}
          # 启用 Docker 构建缓存
          cache-from: type=gha
          cache-to: type=gha,mode=max